---
- name: Update and upgrade apt packages
  apt:
    upgrade:        dist
    update_cache:   yes
    autoremove:     yes
    force_apt_get:  yes
  register:         upgrade_results
  become:           true
  
- name: set fact to signal that a reboot is needed
  set_fact:         reboot_on_upgrade="{{ 'reboot' in upgrade_results.stdout }}" 
  
- name: ensure that config.txt cmdline is correct
  lineinfile:
    path:           "/boot/firmware/config.txt"
    regexp:         '^cmdline='
    line:           "cmdline=cmdline.txt"
  register:         boot_config
  become:           true
  
- name: Update firmware if needed
  block:
  - name: add useful tooling
    apt:
      name:         "unzip"
      force_apt_get: yes
    become:         true
  
  - name: Ensures files/generated dir exists on controller
    file: 
      path:         "files/generated"
      state:        directory
    delegate_to:    localhost
    
  - name: download latest firmware version
    get_url:
      url:         "https://github.com/raspberrypi/rpi-eeprom/archive/master.zip"
      dest:         "files/generated/rpi-eeprom.zip"
      force:        true
    delegate_to:    localhost
    
  - name:           create temporary build directory
    tempfile:
      state:        directory
      suffix:       ".firmware"
    register:       firmware_tmp_dir
    changed_when:   false
    become:         true
    
  - name: unarchive firmware repository to firmware_tmp_dir
    unarchive:
      src:          "files/generated/rpi-eeprom.zip"
      dest:         "{{ firmware_tmp_dir.path }}"
      mode:         '0500'
    changed_when:   false
    become:         true
    
  - name: get latest vl805 version
    find:
      paths:        "{{ firmware_tmp_dir.path }}/rpi-eeprom-master/firmware/{{ firmware.release }}"
      patterns:     "vl805-*.bin"
      file_type:    file
    register:       vl805_firmwares
    become:         true
    
  - name: select latest firmware version
    set_fact:       vl805_version="{{ (vl805_firmwares.files | map(attribute='path') | map('basename') | map('regex_replace', '^vl805-(.*)\\.bin$', '\\1') | list | sort )[-1] }}"
    
  - name: Check firmware version
    shell:          "{{ firmware_tmp_dir.path }}/rpi-eeprom-master/firmware/vl805 -v {{ firmware_tmp_dir.path }}/rpi-eeprom-master/firmware/{{ firmware.release }}/vl805-{{ vl805_version }}.bin"
    register:       firmware_check
    changed_when:   false
    failed_when:    false
    become:         true
    
  - name: Update firmware if needed
    shell:          "{{ firmware_tmp_dir.path }}/rpi-eeprom-master/firmware/vl805 -w {{ firmware_tmp_dir.path }}/rpi-eeprom-master/firmware/{{ firmware.release }}/vl805-{{ vl805_version }}.bin"
    when:           firmware_check.rc != 0
    register:       firmware
    become:         true
    
  always:
  - name: delete temporary build directory
    file:
      path:         "{{ firmware_tmp_dir.path }}"
      state:        absent
    when:           firmware_tmp_dir is defined
    changed_when:   false
    become:         true
  
- name: Set timezone
  timezone:
    name:           "{{ timezone }}"
  become:           true
  
- name: add useful tooling
  apt:
    name:           "{{ useful_tools }}"
    force_apt_get:  yes
  become:           true
  
# reboot if needed
- name: reboot on change
  block:
  - name: reboot
    reboot:
    
  - name:           create temporary build directory
    tempfile:
      state:        directory
      suffix:       build
    register:       build_tmp_dir
    changed_when:   false
    
  - name: create wait_for_automatic_updates.sh script
    copy:
      content: |
        #!/bin/bash  
        # Ubuntu automatically checks for updates on first boot. This ensures that has completed before continuing.
        # If it hasn't finished in 10 minutes, the script will exit ungracefully.
        timeout=$(($(date +%s) + 600))
        while pgrep apt > /dev/null; do
            time=$(date +%s)
            if [[ $time -ge $timeout ]]; then
                exit 1
            fi
            sleep 1
        done
        exit 0
        
      dest:         "{{ build_tmp_dir.path }}/wait_for_automatic_updates.sh"
      owner:        root
      group:        root
      mode:         '0755'
    changed_when:   false
    
  - name: execute wait_for_automatic_updates.sh script
    command:        "{{ build_tmp_dir.path }}/wait_for_automatic_updates.sh"
    changed_when:   false
    
  always:
  - name: delete temporary build directory
    file:
      path:         "{{ build_tmp_dir.path }}"
      state:        absent
    when:           build_tmp_dir is defined
    changed_when:   false
  
  when:             reboot_on_upgrade or firmware.changed or boot_config.changed
  become:           true
  
