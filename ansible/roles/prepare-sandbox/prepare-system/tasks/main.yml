---
- name: Update and upgrade apt packages
  apt:
    upgrade:        dist
    update_cache:   yes
    autoremove:     yes
    force_apt_get:  yes
  register:         upgrade_results
  become:           true
  
- name: set fact to signal that a reboot is needed
  set_fact:         reboot_on_upgrade="{{ 'reboot' in upgrade_results.stdout }}" 
  
- name: ensure that config.txt cmdline is correct
  lineinfile:
    path:           "/boot/firmware/config.txt"
    regexp:         '^cmdline='
    line:           "cmdline=cmdline.txt"
  register:         boot_config
  become:           true
  
- name: install raspberrypi userland and rpi-eeprom tools
  block:
  - name: Install needed tools
    apt: 
      name:             "{{ packages }}"
      state:            present
      update_cache:     yes
      autoremove:       yes
      force_apt_get:    yes
    vars:
      packages:
      - gcc
      - pkg-config
      - cmake
      - git
      - python3
      - python-is-python3
    become:             true
    
  - name: Ensures /opt/vc exists
    file: 
      path:             "/opt/vc"
      state:            directory
      owner:            root
      group:            root
      mode:             '0755'
    become:             true
    
  - name: download latest userland repository
    git:
      repo:             "https://github.com/raspberrypi/userland.git"
      dest:             "/opt/vc/userland"
    become:             true
    
  - name: create temporary build directory
    tempfile:
      state:            directory
      suffix:           ".userland"
    register:           userland_tmp_dir
    changed_when:       false
    become:             true
    
  - name: build userland
    shell:              "cd /opt/vc/userland ; ./buildme --aarch64 '{{ userland_tmp_dir.path }}'"
    changed_when:       false
    become:             true
    no_log:             true
    
  - name: Synchronization of build component with /opt/vc folder
    synchronize:
      src:              "{{ userland_tmp_dir.path }}/opt/vc/{{ item }}"
      dest:             "/opt/vc"
      checksum:         yes
      times:            no
      archive:          yes
      delete:           yes
      recursive:        yes
      links:            yes
    with_items:
    - bin
    - include
    - lib
    - src
    delegate_to:        "{{ ansible_eth0.ipv4.address }}"
    become:             true
    
  - name: create lib config file
    copy:
      dest:             "/etc/ld.so.conf.d/00-vmcs.conf"
      content:  |
        /opt/vc/lib
      owner:            root
      group:            root
      mode:             '0644'
    become:             true
    
  - name: get old installed binaries cmd
    shell:              "ls -l /usr/bin | awk -F '-> ' '$2 ~ /^\\/opt\\/vc\\/bin\\/.*$/{ print $2 }'"
    changed_when:       false
    become:             true
    register:           old_binaries_cmd
    
  - name: set old installed binaries
    set_fact:
      old_binaries:     "{{ old_binaries_cmd.stdout_lines                       | map('basename')   | list }}"
    
  - name: find current binaries file
    find:
      path:             "/opt/vc/bin"
      recurse:          no
      file_type:        file
    become:             true
    register:           current_binaries_file_find
    
  - name: find current binaries link
    find:
      path:             "/opt/vc/bin"
      recurse:          no
      file_type:        link
    become:             true
    register:           current_binaries_link_find
    
  - name: set current binaries
    set_fact:
      current_binaries: "{{ (current_binaries_file_find.files + current_binaries_link_find.files) | map(attribute='path') | map('basename')   | list }}"
    
  - name: delete unneeded /usr/bin links
    file:
      path:             "/usr/bin/{{ item }}"
      state:            absent
    when:               item not in current_binaries
    with_items:         "{{ old_binaries }}"
    become:             true
    
  - name: add /usr/bin links
    file:
      src:              "/opt/vc/bin/{{ item }}"
      dest:             "/usr/bin/{{ item }}"
      owner:            root
      group:            root
      state:            link
    with_items:         "{{ current_binaries }}"
    become:             true
    
  always:
  - name: delete temporary build directory
    file:
      path:             "{{ userland_tmp_dir.path }}"
      state:            absent
    when:               userland_tmp_dir is defined
    changed_when:       false
    become:             true
  
- name: Update firmware if needed
  block:
  - name: add useful tooling
    apt:
      name:         "unzip"
      force_apt_get: yes
    become:         true
    
  - name: Ensures files/generated dir exists on controller
    file: 
      path:         "files/generated"
      state:        directory
    delegate_to:    localhost
    
  - name: download latest firmware version
    get_url:
      url:         "https://github.com/raspberrypi/rpi-eeprom/archive/master.zip"
      dest:         "files/generated/rpi-eeprom.zip"
      force:        true
    delegate_to:    localhost
    
  - name:           create temporary build directory
    tempfile:
      state:        directory
      suffix:       ".firmware"
    register:       firmware_tmp_dir
    changed_when:   false
    become:         true
    
  - name: unarchive firmware repository to firmware_tmp_dir
    unarchive:
      src:          "files/generated/rpi-eeprom.zip"
      dest:         "{{ firmware_tmp_dir.path }}"
      mode:         '0500'
    changed_when:   false
    become:         true
    
  - name: create rpi-eeprom-update default file
    copy:
      dest:             "/etc/default/rpi-eeprom-update"
      content:  |
        BOOTFS=/boot/firmware
        FIRMWARE_RELEASE_STATUS="{{ firmware_release }}"
      owner:            root
      group:            root
      mode:             '0644'
    become:             true
    
  - name: Check if firmware update is needed
    shell:          "{{ firmware_tmp_dir.path }}/rpi-eeprom-master/rpi-eeprom-update"
    register:       firmware_check_cmd
    changed_when:   false
    become:         true
    
  - name: update if firmware update is needed
    shell:          "{{ firmware_tmp_dir.path }}/rpi-eeprom-master/rpi-eeprom-update -a"
    when:           "'UPDATE REQUIRED' in firmware_check_cmd.stdout"
    become:         true
    
  always:
  - name: delete temporary build directory
    file:
      path:         "{{ firmware_tmp_dir.path }}"
      state:        absent
    when:           firmware_tmp_dir is defined
    changed_when:   false
    become:         true
  
- name: Set timezone
  timezone:
    name:           "{{ timezone }}"
  become:           true
  
- name: add useful tooling
  apt:
    name:           "{{ useful_tools }}"
    force_apt_get:  yes
  become:           true
  
# reboot if needed
- name: reboot on change
  block:
  - name: reboot
    reboot:
    
  - name:           create temporary build directory
    tempfile:
      state:        directory
      suffix:       build
    register:       build_tmp_dir
    changed_when:   false
    
  - name: create wait_for_automatic_updates.sh script
    copy:
      content: |
        #!/bin/bash  
        # Ubuntu automatically checks for updates on first boot. This ensures that has completed before continuing.
        # If it hasn't finished in 10 minutes, the script will exit ungracefully.
        timeout=$(($(date +%s) + 600))
        while pgrep apt > /dev/null; do
            time=$(date +%s)
            if [[ $time -ge $timeout ]]; then
                exit 1
            fi
            sleep 1
        done
        exit 0
        
      dest:         "{{ build_tmp_dir.path }}/wait_for_automatic_updates.sh"
      owner:        root
      group:        root
      mode:         '0755'
    changed_when:   false
    
  - name: execute wait_for_automatic_updates.sh script
    command:        "{{ build_tmp_dir.path }}/wait_for_automatic_updates.sh"
    changed_when:   false
    
  always:
  - name: delete temporary build directory
    file:
      path:         "{{ build_tmp_dir.path }}"
      state:        absent
    when:           build_tmp_dir is defined
    changed_when:   false
  
  when:             reboot_on_upgrade or 'UPDATE REQUIRED' in firmware_check_cmd.stdout or boot_config.changed
  become:           true
  
