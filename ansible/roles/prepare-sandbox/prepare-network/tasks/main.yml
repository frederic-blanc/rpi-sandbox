---
- name: ensure /boot/firmware/config.txt exist
  copy:
    content:        ""
    dest:           "/boot/firmware/cmdline.txt"
    force:          no
    owner:          root
    group:          root
    mode:           '0644'
  become:           true
  
- name: disable ipv6 in cmdline.txt
  block:
  - name:           create temporary build directory
    tempfile:
      state:        directory
      suffix:       build
    register:       build_tmp_dir
    changed_when:   false
    
  - name: copy cmdline.txt to build_tmp_dir
    copy: 
      remote_src:   yes
      src:          "/boot/firmware/cmdline.txt"
      dest:         "{{ build_tmp_dir.path }}/cmdline.txt"
    changed_when:   false
    
  - name: replace space by carriage return into the built file
    replace:
      path:         "{{ build_tmp_dir.path }}/cmdline.txt"
      regexp:       '\s+'
      replace:      '\n'
    changed_when:   false
    
  - name: ensure  ipv6.disable is set to 1
    lineinfile:
      path:         "{{ build_tmp_dir.path }}/cmdline.txt"
      regexp:       '^ipv6\.disable=.*$'
      line:         "ipv6.disable=1"
    changed_when:   false
    
  - name: replace space by carriage return into the built file
    replace:
      path:         "{{ build_tmp_dir.path }}/cmdline.txt"
      regexp:       '\n'
      replace:      ' '
    changed_when:   false
    
  - name: copy built cmdline.txt to /boot/firmware
    copy: 
      remote_src:   yes
      src:          "{{ build_tmp_dir.path }}/cmdline.txt"
      dest:         "/boot/firmware/cmdline.txt"
      owner:        root
      group:        root
      mode:         '0644'
    register:       cmdline_ipv6_disable
    
  always:
  - name: delete temporary build directory
    file:
      path:         "{{ build_tmp_dir.path }}"
      state:        absent
    when:           build_tmp_dir is defined
    changed_when:   false
  become:           true
  
- name: comment ipv6 hosts lines
  replace: 
    path:       "/etc/hosts"
    regexp:     '^((?!#).*::[0-9].*)$'
    replace:    '#\1'
  become:        true
  
# set hostname and FQDN
- name: set hostname
  hostname:
    name:       "{{ hostname }}"
  become:       true
  
- name: add hotname and fqdn to /etc/hosts
  blockinfile:
    path:       "/etc/hosts"
    block:      |
      127.0.1.1       {{ fqdn }} {{ hostname }}
      {{ ansible_eth0.ipv4.address }}    {{ fqdn }} {{ hostname }}
  become: true
  
# set static IP
- name: install netplan config file
  template:
    src:            "50-eth0-ansible.yaml.j2"
    dest:           "/etc/netplan/50-eth0-ansible.yaml"
    owner:          root
    group:          root
    mode:           '0644'
  register:         netplan_eth0_ansible
  become:           true
  
- name: remove old cloud-init netplan config file
  file:
    path:           "/etc/netplan/50-cloud-init.yaml"
    state:          absent
  register:         netplan_cloud_init
  become:           true
  
- name: apply netplan change
  shell:            "netplan apply"
  when:             netplan_eth0_ansible.changed or netplan_cloud_init.changed
  become:           true
  
- name: restart service networkd
  systemd:
    state:          restarted
    name:           systemd-networkd
  when:             netplan_eth0_ansible.changed or netplan_cloud_init.changed
  become:           true
  
#- name: create dns_servers.conf file
#  file:
#    path:          "/etc/systemd/resolved.conf.d/"
#    state:         directory
#    owner:         root
#    group:         root
#    mode:          '0755'
#  become:          true
#   
#- name: create dns_servers.conf file
#  copy:
#    content: |
#      [Resolve]
#      DNS={% for dns in domain_name_servers %}{{ dns }} {% endfor %}
#      
#      Domains=~.
#    dest:          "/etc/systemd/resolved.conf.d/dns_servers.conf"
#    owner:         root
#    group:         root
#    mode:          '0644'
#  register:        dns_servers_file
#  become:          true
#  
#- name: create dnssec.conf file
#  copy:
#    content: |
#      [Resolve]
#      DNSSEC=true
#    dest:          "/etc/systemd/resolved.conf.d/dnssec.conf"
#    owner:         root
#    group:         root
#    mode:          '0644'
#  register:        dnssec_file
#  become:          true
#  
#- name: create fallback_dns.conf file
#  copy:
#    content: |
#      [Resolve]
#      FallbackDNS=
#    dest:          "/etc/systemd/resolved.conf.d/fallback_dns.conf"
#    owner:         root
#    group:         root
#    mode:          '0644'
#  register:        fallback_dns_file
#  become:          true
#  
#- name: restart service networkd
#  systemd:
#    state:         restarted
#    name:          systemd-resolved
#  when:            dns_servers_file.changed or dnssec_file.changed or fallback_dns_file.changed
#  become:          true
  
- name: install resolvconf
  apt:
    name:           "resolvconf"
    force_apt_get: yes
  register:         install_resolvconf
  become:           true
  
- name: create dns_servers.conf file
  copy:
    content: |
      # Make edits to /etc/resolvconf/resolv.conf.d/head.
      {% for dns in domain_name_servers %}
      nameserver {{ dns }}
      search     {{ domain_name }}
      {% endfor %}
    dest:           "/etc/resolvconf/resolv.conf.d/head"
    owner:          root
    group:          root
    mode:           '0644'
  register:         dns_servers_file
  become:           true
  
- name: restart service networkd
  systemd:
    state:          restarted
    name:           systemd-resolved
  when:             install_resolvconf.changed or dns_servers_file.changed
  become:           true
  
- name: remove ip in cmdline.txt
  block:
  - name:           create temporary build directory
    tempfile:
      state:        directory
      suffix:       build
    register:       build_tmp_dir
    changed_when:   false
    
  - name: copy cmdline.txt to build_tmp_dir
    copy: 
      remote_src:   yes
      src:          "/boot/firmware/cmdline.txt"
      dest:         "{{ build_tmp_dir.path }}/cmdline.txt"
    changed_when:   false
    
  - name: replace space by carriage return into the built file
    replace:
      path:         "{{ build_tmp_dir.path }}/cmdline.txt"
      regexp:       '\s+'
      replace:      '\n'
    changed_when:   false
    
  - name: ensure ip is absent
    lineinfile:
      path:         "{{ build_tmp_dir.path }}/cmdline.txt"
      regexp:       '^ip=.*$'
      state:        absent
    changed_when:   false
    
  - name: replace space by carriage return into the built file
    replace:
      path:         "{{ build_tmp_dir.path }}/cmdline.txt"
      regexp:       '\n'
      replace:      ' '
    changed_when:   false
    
  - name: copy built cmdline.txt to /boot/firmware
    copy: 
      remote_src:   yes
      src:          "{{ build_tmp_dir.path }}/cmdline.txt"
      dest:         "/boot/firmware/cmdline.txt"
      owner:        root
      group:        root
      mode:         '0644'
    register:       cmdline_ip
    
  always:
  - name: delete temporary build directory
    file:
      path:         "{{ build_tmp_dir.path }}"
      state:        absent
    when:           build_tmp_dir is defined
    changed_when:   false
  become:           true
  
# disable wifi
- name: stop and disable services
  systemd:
    name:           "{{ item }}"
    state:          stopped
    enabled:        false
  with_items:
  - "wpa_supplicant.service"
  become: true
  
- name: add module bt and wifi to disable list
  blockinfile:
    path:           "/boot/firmware/usercfg.txt"
    block: |
      dtoverlay=disable-wifi
      dtoverlay=disable-bt
  register:         config_wifi_bt
  become:           true
  
# reboot if needed
- name: reboot on change
  reboot:
  when:             cmdline_ipv6_disable.changed or cmdline_ip.changed or config_wifi_bt.changed
  become:           true
  