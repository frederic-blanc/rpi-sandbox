---
# activate cgroup
- name: ensure /boot/firmware/cmdline.txt exist
  copy:
    content:        ""
    dest:           "/boot/firmware/cmdline.txt"
    force:          no
    owner:          root
    group:          root
    mode:           '0644'
  become:           true
  
- name: activate cgroup_enable, cgroup_memory and swapaccount in cmdline.txt
  block:
  - name:           create temporary build directory
    tempfile:
      state:        directory
      suffix:       build
    register:       build_tmp_dir
    changed_when:   false
    
  - name: copy cmdline.txt to build_tmp_dir
    copy: 
      remote_src:   yes
      src:          "/boot/firmware/cmdline.txt"
      dest:         "{{ build_tmp_dir.path }}/cmdline.txt"
    changed_when:   false
    
  - name: replace space by carriage return into the built file
    replace:
      path:         "{{ build_tmp_dir.path }}/cmdline.txt"
      regexp:       '\s+'
      replace:      '\n'
    changed_when:   false
    
  - name: ensure swapaccount is set to 1
    lineinfile:
      path:         "{{ build_tmp_dir.path }}/cmdline.txt"
      regexp:       '^swapaccount=.*$'
      line:         "swapaccount=1"
    changed_when:   false
    
  - name: ensure cgroup_memory is set to 1
    lineinfile:
      path:         "{{ build_tmp_dir.path }}/cmdline.txt"
      regexp:       '^cgroup_memory=.*$'
      line:         "cgroup_memory=1"
    changed_when:   false
    
  - name: ensure cgroup_enable cpuset and memory are set
    lineinfile:
      path:         "{{ build_tmp_dir.path }}/cmdline.txt"
      line:         "{{ item }}"
    with_items:
    - "cgroup_enable=cpuset"
    - "cgroup_enable=memory"
    changed_when:   false
    
  - name: ensure wrong cgroup_enable value are absent
    lineinfile:
      path:         "{{ build_tmp_dir.path }}/cmdline.txt"
      regexp:       '^cgroup_enable=(?!(memory|cpuset)$).*$'
      state:        absent
    changed_when:   false
    
  - name: replace space by carriage return into the built file
    replace:
      path:         "{{ build_tmp_dir.path }}/cmdline.txt"
      regexp:       '\n'
      replace:      ' '
    changed_when:   false
    
  - name: copy built cmdline.txt to /boot/firmware
    copy: 
      remote_src:   yes
      src:          "{{ build_tmp_dir.path }}/cmdline.txt"
      dest:         "/boot/firmware/cmdline.txt"
      owner:        root
      group:        root
      mode:         '0644'
    register:       cmdline_docker_enable
    
  always:
  - name: delete temporary build directory
    file:
      path:         "{{ build_tmp_dir.path }}"
      state:        absent
    when:           build_tmp_dir is defined
    changed_when:   false
  become:           true
  
# reboot if needed
- name: reboot on change
  reboot:
  when:             cmdline_docker_enable.changed
  become:           true
  
# Install docker packages
- name: Install docker and its dependencies
  apt: 
    name:           "docker.io"
    state:          present
    update_cache:   yes
    autoremove:     yes
    force_apt_get:  yes
    install_recommends: no
  notify:
    - docker status
  become:           true
  
- name: Ensures /etc/docker dir exists
  file: 
    path:           "/etc/docker"
    state:          directory
    owner:          root
    group:          root
    mode:           '0755'
  become:           true
  
- name: Copy docker daemon.json on server to /etc/docker
  template:
    src:            "docker-daemon.j2"
    dest:           "/etc/docker/daemon.json"
    owner:          root
    group:          docker
    mode:           '0644'
  register:         daemon
  become:           true
  
- name: restart service docker
  systemd:
    state:          restarted
    daemon_reload:  yes
    name:           docker
  when:             daemon.changed
  notify:
  - docker status
  become: true
  
- name: ensure service docker is started and enable
  systemd:
    name:           docker
    state:          started
    enabled:        true
  notify:
  - docker status
  become:           true
  
# add docker group to work_users
- name: add docker group to work_users
  user:
    name:           "{{ item.name }}"
    groups:         docker
    append:         yes
  with_items:       "{{ work_users }}"
  become: true
  
